params {

    // Set default parameters
    help = false
    sample_sheet = false
    fastq_folder = false
    fastq_suffix = ".fastq.gz"
    output = false
    genome = false
    barcodes = false
    save_intermediates= false

    // Quality trimming
    min_qvalue = 20
    min_align_score = 40
    RD1_ADAPTER_3P = "GATCGGAAGAGCACACGTCTGAACTCCAGTC"
    RD2_ADAPTER_3P = "GATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT"

    // Unique molecular tags
    barcode_length = 6
    barcode_max_homopolymer = 6
    max_barcode_mismatch = 2

    // Trim a fixed amount from the 5' of both reads
    trim_length = 5

    // Split up each specimen into shards for parallel processing
    n_shards = 100

    // Minimum proportion of bases needed to call an SSC base
    min_base_prop = 0.7

    // Maximum distance that an SSC may change position after realignment
    max_realign_offset = 5

    // Minimum number of reads needed for EACH SSC to keep a DSC
    // Note that we will keep a DSC from either end of a molecule,
    // even if the other end doesn't have enough data to use
    min_reads = 3

    // If specified, mask everything outside of a user-provided target region (BED file)
    target_regions_bed = false

    // If specified, a CSV file containing the set of coordinates which
    // should be ignored during mutation/variant calling
    ignore_coordinates = false

    // Set the containers to use for each component
    container__cutadapt = "quay.io/biocontainers/cutadapt:3.5--py36hc5360cc_0"
    container__fastqc = "quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1"
    container__multiqc = "quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0"
    container__pandas = "quay.io/fhcrc-microbiome/python-pandas:0fd1e29"
    container__python_plotting = "quay.io/hdc-workflows/python-plotting:b50a842"
    container__bwa = "quay.io/hdc-workflows/bwa-samtools:93deeda"
    container__bcftools = "quay.io/biocontainers/bcftools:1.13--h3a49de5_0"
}

profiles {
    standard {
        process {
            withLabel: io_limited {
                cpus = { 1 * task.attempt }
                memory = { 4.GB * task.attempt }
            }
            withLabel: mem_medium {
                cpus = { 4 * task.attempt }
                memory = { 30.GB * task.attempt }
            }
            withLabel: mem_verylarge {
                cpus = { 4 * task.attempt }
                memory = { 120.GB * task.attempt }
            }
            withLabel: cpu_medium {
                cpus = { 8 * task.attempt }
                memory = { 15.GB * task.attempt }
            }
            withLabel: cpu_verylarge {
                cpus = { 36 * task.attempt }
                memory = { 58.GB * task.attempt }
            }
            errorStrategy = 'retry'
            maxRetries = 5
        }
    }
    docker {
        docker {
            enabled = true
            temp = 'auto'
        }
        process {
            withLabel: io_limited {
                cpus = 1
                memory = 1.GB
            }
            withLabel: mem_medium {
                cpus = 1
                memory = 1.GB
            }
            withLabel: cpu_medium {
                cpus = 1
                memory = 1.GB
            }
            withLabel: cpu_verylarge {
                cpus = 1
                memory = 1.GB
            }
            errorStrategy = 'retry'
            maxRetries = 5
            maxForks = 10
        }
    }
}

manifest {
    defaultBranch = 'main'
    homePage = 'https://github.com/FredHutch/maddd-seq'
    mainScript = 'main.nf'
    name = 'MADDD-seq'
    nextflowVersion = '>=21.04.0'
    version = '1.0'
}

